<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>The Brain Buzzer</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      max-width: 700px;
      margin: auto;
      padding: 20px;
      background-image: url('bg3.jpeg'); /* Use your bg.jpeg file */
      background-size: cover;
      background-position: center;
      background-repeat: no-repeat;
      background-attachment: fixed;
      color: #333;
    }
    h1 {
      text-align: center;
    }
    button {
      padding: 8px 14px;
      margin-top: 10px;
    }
    .option {
      display: block;
      margin: 6px 0;
      padding: 8px;
      background-color: rgba(242, 242, 242, 0.9);
      cursor: pointer;
      border-radius: 4px;
      border: none;
      font-size: 16px;
    }
    .correct { background-color: #21c726 !important; }
    .wrong { background-color: #a11c29 !important; }
    #scoreboard {
      margin-top: 20px;
      border-top: 1px solid #ccc;
      padding-top: 15px;
      background-color: rgba(255, 255, 255, 0.8);
      border-radius: 4px;
    }
  </style>
</head>
<body>
  <h1>The Brain Buzzer</h1>

  <label>Category:
    <select id="category"></select>
  </label>
  <label>Difficulty:
    <select id="difficulty">
      <option value="any">Any</option>
      <option value="easy">Easy</option>
      <option value="medium">Medium</option>
      <option value="hard">Hard</option>
    </select>
  </label>
  <button onclick="startQuiz()">Start Quiz</button>

  <div id="quiz-area" style="display:none;">
    <h2 id="question-category"></h2>
    <p id="question-text"></p>
    <div id="options"></div>
    <button id="next-btn" style="display:none;">Next Question</button>
  </div>

  <div id="scoreboard"></div>

  <script>
    let currentQuestion = null;
    let categoryScores = {};
    let token = null;

    async function fetchToken() {
      const res = await fetch("https://opentdb.com/api_token.php?command=request");
      const data = await res.json();
      token = data.token;
    }

    async function loadCategories() {
      const res = await fetch("https://opentdb.com/api_category.php");
      const data = await res.json();
      const select = document.getElementById("category");

      let opt = document.createElement("option");
      opt.value = "any";
      opt.textContent = "Any";
      select.appendChild(opt);

      data.trivia_categories.forEach(cat => {
        let o = document.createElement("option");
        o.value = cat.id;
        o.textContent = cat.name;
        select.appendChild(o);
      });
    }

    async function startQuiz() {
      document.getElementById("scoreboard").innerHTML = "";
      categoryScores = {};
      await fetchQuestion();
    }

    async function fetchQuestion() {
      if (!token) await fetchToken();
      document.getElementById("next-btn").style.display = "none";

      let category = document.getElementById("category").value;
      let difficulty = document.getElementById("difficulty").value;

      let url = `https://opentdb.com/api.php?amount=1&type=multiple&token=${token}`;
      if (category !== "any") url += `&category=${category}`;
      if (difficulty !== "any") url += `&difficulty=${difficulty}`;

      const res = await fetch(url);
      const data = await res.json();

      if (!data.results || data.results.length === 0) {
        alert("No more questions for these settings. Try different category/difficulty.");
        showScoreboard();
        return;
      }

      currentQuestion = data.results[0];
      showQuestion(currentQuestion);
    }

    function htmlDecode(input) {
      let e = document.createElement('textarea');
      e.innerHTML = input;
      return e.value;
    }

    function showQuestion(q) {
      document.getElementById("quiz-area").style.display = "block";
      document.getElementById("question-category").textContent = htmlDecode(q.category);
      document.getElementById("question-text").textContent = htmlDecode(q.question);

      const optionsEl = document.getElementById("options");
      optionsEl.innerHTML = "";

      let options = q.incorrect_answers.map(htmlDecode);
      let correct = htmlDecode(q.correct_answer);
      options.push(correct);
      options.sort(() => Math.random() - 0.5);

      options.forEach(opt => {
        let btn = document.createElement("button");
        btn.className = "option";
        btn.textContent = opt;
        btn.onclick = () => checkAnswer(btn, opt, correct, q.category);
        optionsEl.appendChild(btn);
      });
    }

    function checkAnswer(button, choice, correct, category) {
      const optionButtons = document.querySelectorAll(".option");
      optionButtons.forEach(b => b.disabled = true); // disable clicks after choosing

      if (!categoryScores[category]) categoryScores[category] = {score:0,total:0};
      categoryScores[category].total++;

      if (choice === correct) {
        button.classList.add("correct");
        categoryScores[category].score++;
      } else {
        button.classList.add("wrong");
        optionButtons.forEach(b => {
          if (b.textContent === correct) b.classList.add("correct");
        });
      }

      showScoreboard();
      document.getElementById("next-btn").style.display = "inline-block";
      document.getElementById("next-btn").onclick = fetchQuestion;
    }

    function showScoreboard() {
      let sb = document.getElementById("scoreboard");
      sb.innerHTML = "<h3>Category-wise Score</h3>";
      for (let cat in categoryScores) {
        sb.innerHTML += `<div>${cat}: ${categoryScores[cat].score}/${categoryScores[cat].total}</div>`;
      }
    }

    window.onload = async () => {
      await fetchToken();
      await loadCategories();
    };
  </script>
</body>
</html>
